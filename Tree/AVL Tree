Self-Balancing BST -> Height-balanced
Time Complexity (asymptotically): search, insert and delete O(H) = O(logN)
Keep track of balance factor instead of color in Red-Black Tree
Balance factor for a node: H(right subtree) - H(left subtree)
When abs(balance factor) > 1, then rotations are applied to correct this (BUT the nodes within a Red-Black Tree may have a balance factor over 1)
The structure of every AVL Tree could be converted into a Red-Black Tree without rotating anything by just assigning colors to all of those nodes
    In a sense, AVL Trees are a subset of all of the possible Red-Black Trees out there
    AVL Tree a subset of Red-Black Trees that are actually shorter
    AVL tree is "more balanced"
This tradeoff can be understood as AVL Trees spending more time inserting, rotating, removing and repairing the parts of the tree
                            versus Red-Black Trees spending more time searching for elements in the tree (relatively higher in height)
    AVL Tree is better at search, Red-Black Tree is better at insertion and deletion
