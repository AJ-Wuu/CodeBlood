Red-Black Tree: BST that stay balanced.
rotate search, insert, delete: O(logn) -- worst BST could be O(n)

Nodes & Height -> N <= 2^H - 1
Shortest BST (Red-Black Tree):
    size <= 2^height - 1
    height = log(size) - 1
Longest BST:
    height <= 2*log(size/2) - 1

Properties:
    1. every node is either red or black (every new node is red)
    2. root node is black <- check this at the end of each insertion
    3. null children are black -- every leaf (NIL) is black
    4. red nodes can only have 0 or 2 black node children, and no red child (if a node is red, then both its children are black)
           a red node cannot only have one child (if the only child is red, violate the color rule; if the only child is black, violate the black-height rule)
           a black node can only have one red child (and it's a red leaf), but cannot only have one black child
    5. for each node, all simple paths from the node to descendant leaves contain the same number of black nodes (black height)
    
Balance for Red-Black Trees is defined through black node heights, which completely ignore the distribution of red nodes throughout the tree.
    This is OK to do because that distribution is limited by the red-black tree property/rule: no red node with red child.
    
Cascading Fix: multiple layers
eg. (from top level to bottom) 
    initial tree: 14(B) -- 7(B), 20(R) -- 1(R), 11(R), 18(B), 25(B) -- 23(R), 29(R)
    insert 27: 14(B) -- 7(B), 20(R) -- 1(R), 11(R), 18(B), 25(B) -- 23(R), 29(R) -- 27(R)
    recolor: 14(B) -- 7(B), 20(R) -- 1(R), 11(R), 18(B), 25(R) -- 23(B), 29(B) -- 27(R) -> 20(R)-25(R) has red property violation
    left rotaton: 20(R) -- 14(B), 25(R) -- 7(B), 18(B), 23(B), 29(B) -- 1(R), 11(R), 27(R) -> root color violation
    recolor: 20(B) -- 14(R), 25(R) -- 7(B), 18(B), 23(B), 29(B) -- 1(R), 11(R), 27(R)

Double Black: when a black node is deleted and replaced by a black child, the child is marked as double black.

Different cases of insertion is determined by: 1. the color of the uncle; 2. the node is the left / right child of its parent
Different cases of deletion is determined by: 1. the color of the sibling; 2. the color of sibling's children

Standard BST insert algorithm is sufficient (ie. there is no need to resolve any red-black tree property violations) for: 
    inserting a new red node -- when the sibling's position is non-null
    removing a node -- when removing a red leaf or
                            removing a black node with two children (copy one child value up to the parent, then delete the child -> no color change)
