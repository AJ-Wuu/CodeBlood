Nodes & Height -> N <= 2^H - 1

Red-Black Tree: BST that stay balanced.

Shortest BST (Red-Black Tree):
    size <= 2^height - 1
    height = log(size) - 1
Longest BST:
    height <= 2*log(size/2) - 1

rotate search, insert, delete: O(logn)

Properties:
    1. root node is black <- check this at the end of each insertion
    2. red nodes can only have 0 or 2 black node children, and no red child (if a node is red, then both its children are black)
    3. every path from root to a null childe must have the same number of black nodes (black height)
    4. null children are black (every leaf(NIL) is black)
    5. every new node is red
    6. balance for Red-Black Trees is defined through black node heights, which completely ignore the distribution of red nodes throughout the tree.
       (This is OK to do because that distribution is limited by the red-black tree property/rule: no red node with red child)
Cascading Fix: multiple layers

Double Black: when a black node is deleted and replaced by a black child, the child is marked as double black.

Different cases of insertion is determined by: 1. the color of the uncle; 2. the node is the left / right child of its parent
