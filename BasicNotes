Packages********************************************************************************************************************************************************************
util VS awt
  java.util.* contains some tool classes, such as List, Map, HashMap, Set, etc.
  java.awt.* encapsulates the classes related to graphics drawing, such as Point, Line, etc.

awt VS swing
                   Definition                                |  Components                     |  Functionality  |  Execution Time  |  Platform     |  MVC** pattern
  java.awt.*    |  API to develop GUI applications           |  heavy weighted, less powerful  |  less           |  more            |  dependent    |  not supported
  java.swing.*  |  part of Java Foundation Classes for many  |  light weighted, more powerful  |  more           |  less            |  independent  |  supported
    **MVC stands for Model–View–Controller, 
          which is a software design pattern commonly used for developing user interfaces that divide the related program logic into three interconnected elements.
          
Interface & Abstract Classes************************************************************************************************************************************************
A class can extend only one superclass and can implement any number of interfaces simultaneously.
extends: A derived class can extend a base class. You may redefine the behaviour of an established relation. Derived class "is a" base class type.
         	It is not compulsory that subclass that extends a superclass override all the methods in a superclass.
          Any number of interfaces can be extended by interface.
implements: You are implementing a contract. The class implementing the interface "has a" capability.
            In an interface you can not implement any of the declared methods. Only the class that "implements" the interface can implement the methods.
            It is compulsory that class implementing an interface has to implement all the methods of that interface.
            An @Override tag is not required for implementing an interface, as there is nothing in the original interface methods to be overridden.
            An interface can never implement any other interface.
