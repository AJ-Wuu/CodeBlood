Regular expressions describe a pattern of characters that the regular expression engine attempts to match within a larger string, plain text document, or program output.

Note that when writting in Makefile, for ending pattern, instead of "a$", it should be written as "a$$"

exact sequence of characters: "abc"
escape characters with special meaning: adding "\", eg. "\.", "\+", "\$", etc.
any digit: "\d"
any digit or letter: "\w"
any space: "\s"
any single character: ".", which will match one digit, letter, space, special character, etc.
any digit, any space, or any word character: "[\d\s\w]"
any combination of possible characters: "[abc]"
a range of possible characters: "[a-c]"
exclude possible characters from set: "[^72]" or "[^abcd]" or "[^0-9a-z]"
either of two different patterns: "(|)", eg, "([a-z]{2}|[0-9]{3})", which will match two lowercase letters or three digits
both patterns (at the same time): ".*", eg. "ii.*g$" will match the pattern containing the consecutive letters "ii" and ending with g
an optional part of pattern: "@(cs\.)?study\.edu", which will match "@study.edu" and "@cs.study.edu"
pattern appears one or more times: "[0-9]+@study.\edu", which will match "4@study.edu", "789@study.edu", etc.
pattern appears zero or more times: "[0-9]*@study.\edu", which will match "@study.edu", "4@study.edu", "789@study.edu", etc.
pattern appears a specific number of times: "[a-z]{m}" where m = 1, 2, ..., which will match two lowercase letters
pattern at the beginning of a line: "^", eg. "^a"
pattern at the end of a line: "$", eg. "g$"

Regular Expressions in Java
Packages needed:
    import java.util.regex.Matcher
    import java.util.regex.Pattern
An example of a String method that makes use of regex:
    String regex = "\\S*@(cs\\.)?study\\.edu)";
    text.split(regex); //use regex to split the whole text
Static method to create a new Pattern object: 
    Pattern pattern = Pattern.compile(regex);
Instance method to create a new Matcher object: 
    Matcher matcher = pattern.matcher(text);
Useful methods to call on a Matcher object: 
    matcher.find(); //return true or false of found the pattern or not
    matcher.group(0); //group(0) is always the entire match
Capture groups are defined within regular expressions by using: "()"

Regular Expressions in Bash:
Two things to be aware of when using regular expressions with grep in bash:
1. ________________________________________________________________________
2. ________________________________________________________________________
Some more useful arguments when using grep:
-E __________________________________    -n __________________________________
-c __________________________________    -o _
