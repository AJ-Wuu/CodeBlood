Regular expressions describe a pattern of characters that the regular expression engine attempts to match within a larger string, plain text document, or program output.

Note that when writting in Makefile, for ending pattern, instead of "a$", it should be written as "a$$"

Connecting two patterns (at the same time): ".*"
Matching files with 6-digit number greater than 100000 in byte-size: ls -l data | grep -E "[1-9][0-9]{5}"
Matching two patterns at the same time (containing the consecutive letters "ii" and ending with g): grep -E "ii.*g$" data/words

exact sequence of characters: "abc"
escape characters with special meaning:
any single character:
any digit, any space, or any word character:
any combination of possible characters:
a range of possible characters:
exclude possible characters from set:
either of two different patterns:
an optional part of pattern:
pattern appears one or more times:
pattern appears zero or more times:
pattern appears a specific number of times:
pattern at the beginning of a line:
pattern at the end of a line:

Regular Expressions in Java:
An example of a String method that makes use of regex: ________________
Static method to create a new Pattern object: ________________
Instance method to create a new Matcher object: ________________
Useful methods to call on a Matcher object: ________________, ________________
Capture groups are defined within regular expressions by using: ________________
Regular Expressions in Bash:
Two things to be aware of when using regular expressions with grep in bash:
1. ________________________________________________________________________
2. ________________________________________________________________________
Some more useful arguments when using grep:
-E __________________________________    -n __________________________________
-c __________________________________    -o _
